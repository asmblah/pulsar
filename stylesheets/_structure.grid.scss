$columns:       12;
$gutter_pc:     1;

.g-col {
    background-clip: padding-box !important;
    box-sizing: border-box;
    display: block;
    float: left;
    padding: 0;

    @include respond-min($screen-phone) {
        margin-left: 0;
    }

    @include respond-min($screen-tablet) {
        margin-left: percentage($gutter_pc / 100);
    }

}

.g-col--first {
    margin-left: 0;
}

/**
 * Creates column styling and assigns a set of responsive widths
 *
 * @param  {int}  $num                   The number of columns the width should span
 * @param  {bool} $force:  false         If true, prevents the width from becoming 100% at smaller screen sizes
 * @param  {bool} $first:  false         If true, removes the left hand column margin
 */
@mixin span($num, $force: false, $gutter: false) {
    $one_col: (100% - ($gutter_pc * ($columns - 1))) / $columns;
    $span_width: ($one_col * ($num)) + ($gutter_pc * ($num - 1));

    @if $gutter == true {
        margin-left: percentage($gutter_pc / 100);
    }

    @if $force == false {
        @include respond-min($screen-phone) {
            width: 100%;
        }
    }
    @else {
        width: $span_width;
    }

    @include respond-min($screen-tablet) {
        width: $span_width;
    }

    @include respond-min($screen-desktop) {
        width: $span_width;
    }
}

@mixin push($num) {
    $one_col: (100% - ($gutter_pc * ($columns - 1))) / $columns;
    margin-left: ($one_col * $num) + ($gutter_pc * ($num));
}

@for $i from 1 through 12 {
    .g-col--#{$i}.g-col--#{$i} {
        @include span($i);
    }
}



@for $i from 1 through 12 {
    @include respond-min($screen-tablet) {
        .g-col-push--#{$i} {
            @include push($i);
        }
    }
}

.g-col--example {
    background-color: #efefef;
    text-align: center;
}
