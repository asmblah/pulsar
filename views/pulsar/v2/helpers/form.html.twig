{#  ----------------------------------------------------------------------------

## Checkbox

Generates a checkbox input field.

### Example usage

    {{
        form.checkbox({
            'label': 'Are you awesome?'
        })
    }}

### Options

Option        | Type   | Description
------------- | ------ | ---------------------------------------------------------
checked       | bool   | Whether the input is checked
class         | string | A space separated list of class names
data          | hash   | Data attributes by key/value
form          | string | Specific one or more forms this label belongs to
id            | string | A unique identifier, if required
help          | string | Additional guidance information to be displayed next to the input
indeterminate | bool | Shows the checkbox as [-], overrides the value of `checked`
label         | string | Text for the `<label>` companion element
value         | string | Specifies the value of the input

#}
{% macro checkbox(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.input({
                    'checked': options.checked,
                    'form': options.form,
                    'id': options.id,
                    'indeterminate': options.indeterminate,
                    'name': options.name,
                    'type': 'checkbox',
                    'value': options.value,
                    'data': options.data
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Checkbox inline

#}
{% macro checkbox_inline(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {%
        set input = elem.input(options|merge({
            'label': null,
            'type': 'checkbox'
        }))
    %}

    {% set label = input ~ options.label %}

    {% if options.input_placement == 'right' %}
        {% set label = options.label ~ input %}
    {% endif %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': null,
            'inputs': [
                elem.label({
                    'bare': true,
                    'class': 'checkbox--inline-v2',
                    'for': options.id,
                    'label': label
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Radio inline

#}
{% macro radio_inline(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {%
        set input = elem.input({
            'form': options.form,
            'id': options.id,
            'name': options.name,
            'selected': options.selected,
            'type': 'radio',
            'data': options.data
        })
    %}

    {% set label = input ~ options.label %}

    {% if options.input_placement == 'right' %}
        {% set label = options.label ~ input %}
    {% endif %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'inputs': [
                elem.label({
                    'bare': true,
                    'class': 'radio--inline-v2',
                    'for': options.id,
                    'label': label
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Create

Creates the opening <form> element.

### Example usage

    {{ form.create() }}

### Options

Option  | Type   | Description
------- | ------ | ---------------------------------------------------
action  | string | URL to post to, will submit to self if empty
class   | string | A space separated list of class names
data    | hash   | Data attributes by key/value
enctype | string | How the form-data should be encoded (requires method = POST)
id      | string | A unique identifier, if required
name    | string | The name of the form
method  | string | The HTTP method to be used to submit the form

#}
{% macro create(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <form
        {% if options.action is not empty %}
            action="{{ options.action }}"
        {% endif %}
        {% if options.method is not empty %}
            method="{{ options.method|default('POST') }}"
        {% endif %}
        {% if options.enctype is not empty and options.method == 'POST' %}
            enctype="{{ options.enctype|default('POST') }}"
        {% endif %}
        {{ util.class('form--horizontal form-v2', options) }}
        {{ util.id(options.id) }}
        {{ util.name(options.name) }}
        {{ util.data(options.data) }}
    >

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Date

Generates a text input field which will show a date picker when focused.

### Example usage

    {{
        form.date({
            'label': 'When is your birthday?'
        })
    }}

### Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, if required
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
placeholder | string | A short hint that describes the expected value
value       | string | Specifies the value of the input

#}
{% macro date(options) %}
{% spaceless %}

    {{
        _self.text({
            'class': options.class,
            'form': options.form,
            'id': options.id,
            'help': options.help,
            'label': options.label,
            'name': options.name,
            'placeholder': options.placeholder|default('dd/mm/yyyy'),
            'value': options.value,
            'data': options.data|default({})|merge({ 'datepicker': 'true' })
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## End

Ends a form and allows you to specify the buttons required to submit/cancel the
form.

### Example usage

    {{
        form.end({
            'actions': [
                form.submit({
                    'label': 'Sign In'
                }),
                html.link({
                    'label': 'Cancel',
                    'href': '/home'
                })
            ]
        })
    }}

### Options

Option  | Type   | Description
------- | ------ | ---------------------------------------------------
actions | array  | Helpers to display as the actions, usually form.submit() but can be buttons, links etc...
class   | string | A space separated list of class names

#}
{% macro end(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

        <div
            {{ util.class('form__actions', options) }}
        >
            {% for action in options.actions %}
                {{- action -}}
            {% endfor %}
        </div>
    </form>

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Fieldset start

Opens a `<fieldset>` and allows you to define an optional `<legend>`.

### Example usage

    {{
        form.fieldset_start({
            'legend': 'I am Legend'
        })
    }}

### Options

Option  | Type   | Description
------- | ------ | ---------------------------------------------------
class   | string | A space separated list of class names
data    | hash   | Data attributes by key/value
form    | string | Specific one or more forms the fieldset belongs to
id      | string | A unique identifier, if required
legend  | string | Label for the optional legend element
name    | string | A name for the fieldset

#}
{% macro fieldset_start(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}

    <fieldset
        {{ util.class(null, options) }}
        {{ util.id(options.id) }}
        {{ util.form(options.form) }}
        {{ util.name(options.name) }}
        {{ util.data(options.data) }}
    >
    {% if options.legend is not empty %}
        <legend>{{ options.legend|raw }}</legend>
    {% endif %}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Fieldset end

Closes a `<fieldset>`.

### Example usage

    {{ form.fieldset_start() }}

#}
{% macro fieldset_end() %}
{% spaceless %}

    </fieldset>

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## File

#}
{% macro file(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.input({
                    'form': options.form,
                    'id': options.id,
                    'name': options.name,
                    'placeholder': options.placeholder,
                    'type': 'file',
                    'value': options.value,
                    'data': options.data
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Group

This is a constructor macro which generates an input field wrapped with standard
markup with the ability to prepend/append extra elements. It is called by other
macros like form.text and form.password, it is not intended to be called
directly from a view.

### Example usage

    {{
        form.group({
            'label': 'What is the meaning of life?'
        })
    }}

### Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
append      | string | Content to display after the input, usually short text or icons
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
id          | string | A unique identifier, if required
form        | string | Specific one or more forms this label belongs to
help        | string | Additional guidance information to be displayed next to the input
inputs      | array  | One or more form inputs to display
label       | string | Text for the `<label>` companion element
placeholder | string | A short hint that describes the expected value
prepend     | string | Content to display before the input, usually short text or icons
type        | string | This macro also drives other text type macros like form.password
removeable  | bool   | Whether to display a remove button after the input (default false)
value       | string | Specifies the value of the input

#}
{% macro group(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/util.html.twig' as util %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}
    {% import '@pulsar/pulsar/v2/helpers/html.html.twig' as html %}

    {% if options.label is null %}
        {% set hasLabelClass = ' form__group--no-label' %}
    {% endif %}

    <div
        {{ util.class('form__group' ~ hasLabelClass, options) }}
    >
        {{
            elem.label({
                'for': options.id,
                'label': options.label
            })
        }}
        <div class="controls">

        {% if options.prepend is not empty or options.append is not empty %}
            <div class="input-group">
                {{ _self.addon(options.prepend) }}
        {% elseif removable %}
            <div class="input-group is-removable">
        {% endif %}

        {% for input in options.inputs %}
                {{- input|raw -}}
        {% endfor %}

        {% if prepend is not empty or append is not empty %}
                {{ _self.addon(append) }}
            </div>
        {% endif %}

        {% if removable %}
                {{ html.remove_button({ 'target': options.id }) }}
            </div>
        {% endif %}

            {{ _self.help(options.help) }}
        </div>
    </div>

{% endspaceless %}
{% endmacro %}




{#  ----------------------------------------------------------------------------

## Password

Generates a password input field.

### Example usage

    {{
        form.password({
            'label': 'Your password'
        })
    }}

### Options

Option      | Type   | Description
----------- | ------ | ---------------------------------------------------------
class       | string | A space separated list of class names
data        | hash   | Data attributes by key/value
form        | string | Specific one or more forms this label belongs to
id          | string | A unique identifier, if required
help        | string | Additional guidance information to be displayed next to the input
label       | string | Text for the `<label>` companion element
placeholder | string | A short hint that describes the expected value
value       | string | Specifies the value of the input

#}
{% macro password(options) %}

    {{
        _self.text({
            'class': options.class,
            'form': options.form,
            'id': options.id,
            'help': options.help,
            'label': options.label,
            'name': options.name,
            'placeholder': options.placeholder,
            'type': 'password',
            'value': options.value,
            'data': options.data
        })
    }}

{% endmacro %}


{#  ----------------------------------------------------------------------------

## Radio

Generates a radio input field.

### Example usage

    {{
        form.radio({
            'label': 'GaGa'
        })
    }}

### Options

Option        | Type   | Description
------------- | ------ | ---------------------------------------------------------
checked       | bool   | Whether the input is checked
class         | string | A space separated list of class names
data          | hash   | Data attributes by key/value
form          | string | Specific one or more forms this label belongs to
id            | string | A unique identifier, if required
help          | string | Additional guidance information to be displayed next to the input
indeterminate | bool | Shows the checkbox as [-], overrides the value of `checked`
label         | string | Text for the `<label>` companion element
value         | string | Specifies the value of the input

#}
{% macro radio(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.input(options|merge({
                    'class': null,
                    'type': 'radio'
                }))
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Select

Generates a select input and passes it to the `group` helper to wrap it in the
required form markup.

### Example usage

    {{
        form.textarea({
            'label': 'Send us a pretty picture'
        })
    }}

### Options

Option      | Type    | Description
----------- | ------- | --------------------------------------------------------
class       | string  | A space separated list of class names
data        | hash    | Data attributes by key/value
form        | string  | Specific one or more forms this label belongs to
id          | string  | A unique identifier, if required
help        | string  | Additional guidance information to be displayed next to the input
label       | string  | Text for the `<label>` companion element
placeholder | string  | A short hint that describes the expected value
rows        | integer | The height, in rows (default 2)
value       | string  | Specifies the value of the input

#}
{% macro select(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.select({
                    'form': options.form,
                    'id': options.id,
                    'options': options.options,
                    'name': options.name,
                    'multiple': options.multiple,
                    'selected': options.selected,
                    'size': options.size,
                    'data': options.data
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Text

Generates a text input and passes it to the `group` helper to wrap it in the
required form markup.

### Example usage

    {{
        form.textarea({
            'label': 'Send us a pretty picture'
        })
    }}

### Options

Option      | Type    | Description
----------- | ------- | --------------------------------------------------------
class       | string  | A space separated list of class names
data        | hash    | Data attributes by key/value
form        | string  | Specific one or more forms this label belongs to
id          | string  | A unique identifier, if required
help        | string  | Additional guidance information to be displayed next to the input
label       | string  | Text for the `<label>` companion element
placeholder | string  | A short hint that describes the expected value
rows        | integer | The height, in rows (default 2)
value       | string  | Specifies the value of the input

#}
{% macro text(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.input({
                    'form': options.form,
                    'id': options.id,
                    'name': options.name,
                    'placeholder': options.placeholder,
                    'type': 'text',
                    'value': options.value,
                    'data': options.data
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}


{#  ----------------------------------------------------------------------------

## Textarea

Generates a text input and passes it to the `group` helper to wrap it in the
required form markup.

### Example usage

    {{
        form.textarea({
            'label': 'Send us a pretty picture'
        })
    }}

### Options

Option      | Type    | Description
----------- | ------- | --------------------------------------------------------
class       | string  | A space separated list of class names
data        | hash    | Data attributes by key/value
form        | string  | Specific one or more forms this label belongs to
id          | string  | A unique identifier, if required
help        | string  | Additional guidance information to be displayed next to the input
label       | string  | Text for the `<label>` companion element
placeholder | string  | A short hint that describes the expected value
rows        | integer | The height, in rows (default 2)
value       | string  | Specifies the value of the input

#}
{% macro textarea(options) %}
{% spaceless %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}

    {{
        _self.group({
            'class': options.class,
            'help': options.help,
            'label': options.label,
            'inputs': [
                elem.textarea({
                    'form': options.form,
                    'id': options.id,
                    'name': options.name,
                    'placeholder': options.placeholder,
                    'rows': options.rows,
                    'value': options.value,
                    'data': options.data
                })
            ]
        })
    }}

{% endspaceless %}
{% endmacro %}















{% macro editor(label, value, id, class, name, help, attributes, airmode = true) %}
    <div class="form__group {{ class }}">
        <label {{ form.for(id) }} class="control__label">{{ label | raw }}</label>
        <div class="controls editor">
            <div class="form__control summernote">{{ value }}</div>
        </div>
    </div>
{% endmacro %}









{% macro checkbox_flush(label, id, class, name, checked = false, help, attributes) %}
    {% import _self as form %}
    <div class="form__group form__group--flush {{ class }}">
        <div class="checkbox">
            <label {{ form.for(id) }} class="checkbox__label">
                <input type="checkbox" {{ form.id(id) }} {{ form.name(name) }} {{ form.checked(checked) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %} />
                {{ label | raw }}
            </label>
            {% if help is not empty %}
            {{ form.help(help) }}
            {% endif %}
        </div>
    </div>
{% endmacro %}

{% macro checkbox_inline_old(label, id, class, name, checked = false, help, attributes) %}
    {% import _self as form %}
    <label {{ form.for(id) }} class="checkbox--inline">
        <input type="checkbox" {{ form.id(id) }} {{ form.name(name) }} {{ form.checked(checked) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %} />
        {% if help is not empty %}
        {{ form.help(help) }}
        {% endif %}
        {{ label | raw }}
    </label>
{% endmacro %}


{% macro radio_right(label, id, class, name, checked = false, help, attributes) %}
    {% import _self as form %}
    <div class="form__group {{ class }}">
        <div class="radio">
            <label {{ form.for(id) }} class="checkbox__label">
                <input type="radio" {{ form.id(id) }} {{ form.name(name) }} {{ form.checked(checked) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %} />
                {{ label | raw }}
            </label>
            {% if help is not empty %}
            {{ form.help(help) }}
            {% endif %}
        </div>
    </div>
{% endmacro %}

{% macro radio_flush(label, id, class, name, checked = false, help, attributes) %}
    {% import _self as form %}
    <div class="form__group form__group--flush {{ class }}">
        <div class="radio">
            <label {{ form.for(id) }} class="checkbox__label">
                <input type="radio" {{ form.id(id) }} {{ form.name(name) }} {{ form.checked(checked) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %} />
                {{ label | raw }}
            </label>
            {% if help is not empty %}
            {{ form.help(help) }}
            {% endif %}
        </div>
    </div>
{% endmacro %}

{% macro radio_inline_old(label, id, class, name, checked = false, help, attributes) %}
    {% import _self as form %}
    <label {{ form.for(id) }} class="radio--inline">
        <input type="radio" {{ form.id(id) }} {{ form.name(name) }} {{ form.checked(checked) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %} />
        {% if help is not empty %}
        {{ form.help(help) }}
        {% endif %}
        {{ label | raw }}
    </label>
{% endmacro %}

{% macro submit(label = 'Submit', class, type, id, href, attributes) %}
    {% import _self as form %}
    <button type="submit" class="btn{% if class is not empty %} {{ class }}{% endif %}" {{ form.id(id) }} {% if attributes is not empty %} {{ attributes|raw }}{% endif %}{% if 'is-disabled' in class %} disabled="disabled"{% endif %} >{{ label|raw }}</button>
{% endmacro %}

{% macro group_old(label, id, class, help, controls, attributes, removable = false) %}
    {% import _self as form %}
    {% import '@pulsar/pulsar/helpers/html.html.twig' as html %}
    {% import '@pulsar/pulsar/v2/helpers/elem.html.twig' as elem %}
    <div class="form__group {{ class }}{% if removable %} is-removable{% endif %}">
        {{
            elem.label({
                'for': id,
                'label': label
            })
        }}
        <div class="controls controls__group">
        {% for control in controls %}
            {{ control|raw }}
        {% endfor %}
        </div>
        {% if removable %}
            {{ html.remove_button(target = id) }}
        {% endif %}
    </div>
{% endmacro %}

{% macro checkbox_group_old(label, checkboxes) %}
    <div class="form__group choice__group">

        <label class="checkbox__label">{{ label }}</label>

        <div class="controls">
        {% for checkbox in checkboxes %}
            {{ checkbox }}
        {% endfor %}
        </div>
    </div>
{% endmacro %}

{% macro radio_group_old(label, radios) %}
    <div class="form__group choice__group">

        <label class="radio__label">{{ label }}</label>

        <div class="controls">
        {% for radio in radios %}
            {{ radio }}
        {% endfor %}
        </div>
    </div>
{% endmacro %}

{% macro addon(value) %}
    {% if value is not empty %}
    <span class="input-group-addon">{{ value }}</span>
    {% endif %}
{% endmacro %}

{# Attributes #}

{% macro value(value) %}
    {% if value is not empty %}
    value="{{ value }}"
    {% endif %}
{% endmacro %}



{% macro id(value) %}
    {% if value is not empty %}
    id="{{ value }}"
    {% endif %}
{% endmacro %}

{% macro name(value) %}
    {% if value is not empty %}
    name="{{ value }}"
    {% endif %}
{% endmacro %}

{% macro placeholder(value) %}
    {% if value is not empty %}
    placeholder="{{ value }}"
    {% endif %}
{% endmacro %}

{% macro help(value) %}
    <p class="help-block">{{ value | raw }}</p>
{% endmacro %}

{% macro rows(value) %}
    rows="{{ value }}"
{% endmacro %}

{% macro checked(value) %}
    {% if value %}checked="checked" {% endif %}
{% endmacro %}

{% macro loading(class) %}
    {% import '@pulsar/pulsar/helpers/html.html.twig' as html %}
    {{ html.loading() }}
{% endmacro %}





{% macro for(value) %}
{% spaceless %}
    {% if value is not empty %}
        for="{{ value }}"
    {% endif %}
{% endspaceless %}
{% endmacro %}

